


//attemp at a mockConnection will likely pull from some
//local csv files if need be
//hopefully only have to fully implement a few methods for my purposes
public class MockConnection implements Connection{

  public void abort(Executor executor){
    return;
  }

  public void ClearWarnings(){
      return;
  }

  public void close(){
    return;
  }

  public void commit(){
    // preparedStatement might use this..
    return;
  }

  public Object[] createArrayOf(String typeName, Object[] elements){
    return null;
  }

  public Blob createBlob(){
    return null;
  }

  public Clob createClob(){
    return null;
  }

  public NClob createNClob(){
    return null;
  }

  public SQLXML createSQLXML(){
    return null;
  }

  public Statement createStatement(){
    return null;
  }

  public Statement createStatement(int resultSetType, int resultSetConcurrency){
    return null;
  }

  public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability){
    return null;
  }

  public Struct createStruct(String typeName, Object[] attributes){
    return null;
  }

  public boolean getAutoCommit(){
    return null;
  }

  public String getCatalog(){
    return null;
  }

  public Properties getClientInfo(){
    return null;
  }

  public String getClientInfo(String name){
    return null;
  }

  public int getHoldability(){
    return null;
  }

  public DatabaseMetaData getMetaData(){
    return null;
  }

  public int getNetworkTimeout(){
    return null;
  }

  public String getSchema(){
    return null;
  }

  public int getTransactionIsolation(){
    return null;
  }

  public Map<String,Class<?>> getTypeMap(){
    return null;
  }

  public SQLWarning getWarnings(){
    return null;
  }

  public boolean isClosed(){
    return null;
  }

  public boolean isReadOnly(){
    return null;
  }

  public boolean isValid(int timeout){
    return null;
  }

  public String nativeSQL(String sql){
    return null;
  }

  public CallableStatement prepareCall(String sql){
    return null;
  }

  public CallableStatement prepareCall(String sql, int resultSetType,
    int resultSetConcurrenty){
      return null;
  }

  public CallableStatement prepareCall(String sql, int resultSetType,
    int resultSetConcurrenty, int resultSetHoldability){
      return null;
  }

  //TODO: NEED THIS ONE
  public PreparedStatement prepareStatement(String sql){
    return null;
  }

  public PreparedStatement prepareStatement(String sql,
    int autoGeneratedKeys){
    return null;
  }

  public PreparedStatement prepareStatement(String sql, int[] columnIndexes){
    return null;
  }

  public PreparedStatement prepareStatement(String sql, int resultSetType,
    int resultSetConcurrenty){
      return null;
  }

  public PreparedStatement prepareStatement(String sql, int resultSetType,
    int resultSetConcurrenty, int resultSetHoldability){
      return null;
  }

  public PreparedStatement prepareStatement(String sql, String[] columnNames){
    return null;
  }

  public void releaseSavepoint(Savepoint savepoint){
    return;
  }

  public void rollback(){
    return;
  }

  public void setAutoCommit(){
    return;
  }

  public void setCatalog(String catalog){
    return;
  }

  public void setClientInfo(Properties properties){
    return;
  }

  public void setHoldability(int holdability){
    return;
  }

  public void setNetworkTimeout(Executor, int milliseconds){
    return;
  }

  public void setReadOnly(boolean readOnly){
    return;
  }

  public Savepoint setSavepoint(){
    return null;
  }

  public Savepoint setSavepoint(String name){
    return null;
  }

  public void setSchema(String schema){
    return;
  }

  public void setTransactionIsolation(int level){
    return;
  }

  public void setTypeMap(Map<String,Class<?>> map){
    return;
  }


}
